Microsoft (R) Macro Assembler Version 9.00.30729.01	    03/02/23 04:02:03
bmh.asm							     Page 1 - 1


				.686
				.mmx
				.model flat, stdcall
				option casemap :none

				;LOCALS @@

 00000000			.data
				align 16
				.radix 16

 00000000 00 01 02 03 04	upcase_table \
	   05 06 07 08 09
	   0A 0B 0C 0D 0E
	   0F
				    db 000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 00a, 00b, 00c, 00d, 00e, 00f
 00000010  10 11 12 13 14	    db 010, 011, 012, 013, 014, 015, 016, 017, 018, 019, 01a, 01b, 01c, 01d, 01e, 01f
	   15 16 17 18 19
	   1A 1B 1C 1D 1E
	   1F
 00000020  20 21 22 23 24	    db 020, 021, 022, 023, 024, 025, 026, 027, 028, 029, 02a, 02b, 02c, 02d, 02e, 02f
	   25 26 27 28 29
	   2A 2B 2C 2D 2E
	   2F
 00000030  30 31 32 33 34	    db 030, 031, 032, 033, 034, 035, 036, 037, 038, 039, 03a, 03b, 03c, 03d, 03e, 03f
	   35 36 37 38 39
	   3A 3B 3C 3D 3E
	   3F
 00000040  40 41 42 43 44	    db 040, 041, 042, 043, 044, 045, 046, 047, 048, 049, 04a, 04b, 04c, 04d, 04e, 04f
	   45 46 47 48 49
	   4A 4B 4C 4D 4E
	   4F
 00000050  50 51 52 53 54	    db 050, 051, 052, 053, 054, 055, 056, 057, 058, 059, 05a, 05b, 05c, 05d, 05e, 05f
	   55 56 57 58 59
	   5A 5B 5C 5D 5E
	   5F

				; db 060, 061, 062, 063, 064, 065, 066, 067, 068, 069, 06a, 06b, 06c, 06d, 06e, 06f
				; db 070, 071, 072, 073, 074, 075, 076, 077, 078, 079, 07a, 07b, 07c, 07d, 07e, 07f

 00000060  60 41 42 43 44	    db 060, 041, 042, 043, 044, 045, 046, 047, 048, 049, 04a, 04b, 04c, 04d, 04e, 04f
	   45 46 47 48 49
	   4A 4B 4C 4D 4E
	   4F
 00000070  50 51 52 53 54	    db 050, 051, 052, 053, 054, 055, 056, 057, 058, 059, 05a, 07b, 07c, 07d, 07e, 07f
	   55 56 57 58 59
	   5A 7B 7C 7D 7E
	   7F

 00000080  80 81 82 83 84	    db 080, 081, 082, 083, 084, 085, 086, 087, 088, 089, 08a, 08b, 08c, 08d, 08e, 08f
	   85 86 87 88 89
	   8A 8B 8C 8D 8E
	   8F
 00000090  90 91 92 93 94	    db 090, 091, 092, 093, 094, 095, 096, 097, 098, 099, 09a, 09b, 09c, 09d, 09e, 09f
	   95 96 97 98 99
	   9A 9B 9C 9D 9E
	   9F
 000000A0  A0 A1 A2 A3 A4	    db 0a0, 0a1, 0a2, 0a3, 0a4, 0a5, 0a6, 0a7, 0a8, 0a9, 0aa, 0ab, 0ac, 0ad, 0ae, 0af
	   A5 A6 A7 A8 A9
	   AA AB AC AD AE
	   AF
 000000B0  B0 B1 B2 B3 B4	    db 0b0, 0b1, 0b2, 0b3, 0b4, 0b5, 0b6, 0b7, 0b8, 0b9, 0ba, 0bb, 0bc, 0bd, 0be, 0bf
	   B5 B6 B7 B8 B9
	   BA BB BC BD BE
	   BF
 000000C0  C0 C1 C2 C3 C4	    db 0c0, 0c1, 0c2, 0c3, 0c4, 0c5, 0c6, 0c7, 0c8, 0c9, 0ca, 0cb, 0cc, 0cd, 0ce, 0cf
	   C5 C6 C7 C8 C9
	   CA CB CC CD CE
	   CF
 000000D0  D0 D1 D2 D3 D4	    db 0d0, 0d1, 0d2, 0d3, 0d4, 0d5, 0d6, 0d7, 0d8, 0d9, 0da, 0db, 0dc, 0dd, 0de, 0df
	   D5 D6 D7 D8 D9
	   DA DB DC DD DE
	   DF
 000000E0  E0 E1 E2 E3 E4	    db 0e0, 0e1, 0e2, 0e3, 0e4, 0e5, 0e6, 0e7, 0e8, 0e9, 0ea, 0eb, 0ec, 0ed, 0ee, 0ef
	   E5 E6 E7 E8 E9
	   EA EB EC ED EE
	   EF
 000000F0  F0 F1 F2 F3 F4	    db 0f0, 0f1, 0f2, 0f3, 0f4, 0f5, 0f6, 0f7, 0f8, 0f9, 0fa, 0fb, 0fc, 0fd, 0fe, 0ff
	   F5 F6 F7 F8 F9
	   FA FB FC FD FE
	   FF

				.radix 0ah

 00000000			.code
				align 4

				public init_bmtable
				; initialize shit_table array[256] of integer
 00000000			init_bmtable proc text:dword, textlen:dword, shift_table:dword
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  57			    push edi

 00000004  8B 7D 10		    mov edi, shift_table
 00000007  8B 4D 08		    mov ecx, text         ;
 0000000A  8B 45 0C		    mov eax, textlen      ;
 0000000D  8B D1		    mov edx, ecx          ; text
 0000000F  B9 00000100		    mov ecx, 100h
 00000014  F3/ AB		    rep stosd

 00000016  8D 48 FF		    lea ecx, [eax -1]     ; len -1
 00000019  8D 87 FFFFFC00	    lea eax, [edi -400h]  ; shift_table rewind
 0000001F  8B FA		    mov edi, edx          ; text
 00000021  8B D0		    mov edx, eax          ; shift_table
 00000023  33 C0		    xor eax, eax

 00000025			@@loop:
 00000025  8A 07		    mov al, [edi]         ; curtail
 00000027  8D 7F 01		    lea edi, [edi +1]
 0000002A  89 0C 82		    mov [edx + eax*4], ecx
 0000002D  49			    dec ecx
 0000002E  7F F5		    jg @@loop

 00000030  5F			    pop edi
				    ret
 00000031  C9		   *	    leave  
 00000032  C2 000C	   *	    ret    0000Ch
 00000035			init_bmtable endp

				public init_bmtable_nc
				; initialize shit_table array[256] of integer for insensitive case search
 00000035			init_bmtable_nc proc text:dword, textlen:dword, shift_table_nc:dword
 00000035  55		   *	    push   ebp
 00000036  8B EC	   *	    mov    ebp, esp
 00000038  56			    push esi
 00000039  57			    push edi

 0000003A  8B 7D 10		    mov edi, shift_table_nc
 0000003D  8B 4D 08		    mov ecx, text         ;
 00000040  8B 45 0C		    mov eax, textlen      ;
 00000043  8B D1		    mov edx, ecx          ; text
 00000045  B9 00000100		    mov ecx, 100h
 0000004A  F3/ AB		    rep stosd

 0000004C  8D 48 FF		    lea ecx, [eax -1]     ; len -1
 0000004F  8D BF FFFFFC00	    lea edi, [edi -400h]  ; shift_table rewind
 00000055  8B F2		    mov esi, edx          ; text
 00000057  BA 00000000 R	    mov edx, offset upcase_table
 0000005C  33 C0		    xor eax, eax

 0000005E			@@loop:
 0000005E  8A 06		    mov al, [esi]         ; curtail
 00000060  46			    inc esi
 00000061  8A 04 10		    mov al, [edx + eax]
 00000064  89 0C 87		    mov [edi + eax*4], ecx
 00000067  49			    dec ecx
 00000068  75 F4		    jnz @@loop

 0000006A  5F			    pop edi
 0000006B  5E			    pop esi
				    ret
 0000006C  C9		   *	    leave  
 0000006D  C2 000C	   *	    ret    0000Ch
 00000070			init_bmtable_nc endp


				public textpos
				; returns position (0-based) of sub-string in other binary string
				; shift_table must already been prepared with init_bmtable
 00000070			textpos proc data:dword, datasize:dword, text:dword, 
				  textlen:dword, shift_table:dword
 00000070  55		   *	    push   ebp
 00000071  8B EC	   *	    mov    ebp, esp
 00000073  56			    push esi
 00000074  57			    push edi
 00000075  53			    push ebx

 00000076  8B 55 0C		    mov edx, datasize
 00000079  8B 75 08		    mov esi, data
 0000007C  8B 45 14		    mov eax, textlen

 0000007F  8D 54 32 FF		    lea edx, [esi + edx -1]
 00000083  8D 74 30 FF		    lea esi, [esi + eax -1]

 00000087  8B 5D 18		    mov ebx, shift_table
 0000008A  89 54 24 FC		    mov dword ptr [esp - 4], edx ; tail
				    ;// mov edx, esi ; store pos

 0000008E  EB 0D		    jmp @@bmStart

 00000090			@@shifted:
 00000090  8A 02		    mov al, [edx]
 00000092  8B F2		    mov esi, edx ; restore pos
 00000094  8B 04 83		    mov eax, [ebx + eax*4]
 00000097  8B 54 24 FC		    mov edx, [esp - 4] ; tail
 0000009B  03 F0		    add esi, eax ; lea esi, [esi + eax]

 0000009D			@@bmStart:
 0000009D  3B F2		    cmp esi, edx
 0000009F  77 21		    ja @@NOTFOUND

 000000A1			@@get_cycle:
 000000A1  8B 7D 10		    mov edi, text
 000000A4  8B 4D 14		    mov ecx, textlen
 000000A7  8B D6		    mov edx, esi ; store pos
 000000A9  8D 7C 39 FF		    lea edi, [edi + ecx -1]
 000000AD  33 C0		    xor eax, eax

 000000AF			@@fetch:
				    ;movzx eax, byte ptr [esi]
 000000AF  8A 06		    mov al, [esi]
 000000B1  4E			    dec esi
 000000B2  3A 07		    cmp al, [edi]
 000000B4  75 DA		    jnz @@shifted
 000000B6  4F			    dec edi
 000000B7  49			    dec ecx
 000000B8  75 F5		    jnz @@fetch
				    ;jmp @@FOUND

 000000BA			@@FOUND:
 000000BA  8D 46 01		    lea eax, [esi +1]
 000000BD  8B 55 08		    mov edx, data
 000000C0  EB 03		    jmp @@DONE

 000000C2			@@NOTFOUND:
 000000C2  8D 42 FF		    lea eax, [edx-1]
				    ;jmp @@DONE

 000000C5			@@DONE:
 000000C5  2B C2		    sub eax, edx
 000000C7  5B			    pop ebx
 000000C8  5F			    pop edi
 000000C9  5E			    pop esi
				    ret
 000000CA  C9		   *	    leave  
 000000CB  C2 0014	   *	    ret    00014h

 000000CE			textpos endp

				public textpos_nc
				; returns position (0-based) of sub-string in other binary string
				; shift_table must already been prepared with init_bmtable_nocase
 000000CE			textpos_nc proc data:dword, datasize:dword,
				  text:dword, textlen:dword, shift_table:dword
 000000CE  55		   *	    push   ebp
 000000CF  8B EC	   *	    mov    ebp, esp
 000000D1  56			    push esi
 000000D2  57			    push edi
 000000D3  53			    push ebx

 000000D4  8B 45 14		    mov eax, textlen
 000000D7  8B 75 08		    mov esi, data
 000000DA  8B 55 0C		    mov edx, datasize
 000000DD  8B 7D 10		    mov edi, text

 000000E0  83 E8 01		    sub eax, 1            ; textlen -1
 000000E3  8D 54 16 FF		    lea edx, [edx+esi-1]  ; data tail

 000000E7  03 F0		    add esi, eax          ; cmp data offset
 000000E9  03 F8		    add edi, eax          ; text tail

 000000EB  52			    push edx              ; 4 data tail
 000000EC  57			    push edi              ; 0 text tail

 000000ED  EB 16		    jmp @@bmStart

 000000EF			@@shifted:
 000000EF  8A 02		    mov al, [edx]

 000000F1  8B 5D 18		    mov ebx, shift_table
 000000F4  8A 80 00000000 R	    mov al, upcase_table[eax]   ; get upcased char
 000000FA  8B F2		    mov esi, edx                ; restore pos
 000000FC  8B 04 83		    mov eax, [ebx + eax*4]
 000000FF  8B 54 24 04		    mov edx, [esp + 4]          ; DATA tail
 00000103  03 F0		    add esi, eax                ; lea esi, [edx + eax]

 00000105			@@bmStart:
 00000105  3B F2		    cmp esi, edx
 00000107  77 2D		    ja @@NOTFOUND

 00000109			@@get_cycle:
 00000109  8B 3C 24		    mov edi, [esp]      ; text tail
 0000010C  8B 4D 14		    mov ecx, textlen    ; text len
 0000010F  8B D6		    mov edx, esi        ; store pos
 00000111  33 C0		    xor eax, eax

 00000113			@@fetch_nc:
 00000113  8A 06		    mov al, [esi]
 00000115  83 EE 01		    sub esi, 1
 00000118  8A 98 00000000 R	    mov bl, upcase_table[eax]
 0000011E  8A 07		    mov al, [edi]
 00000120  83 EF 01		    sub edi, 1
 00000123  3A 98 00000000 R	    cmp bl, upcase_table[eax]
 00000129  75 C4		    jnz @@shifted
 0000012B  49			    dec ecx
 0000012C  75 E5		    jnz @@fetch_nc
				    ;jmp @@FOUND

 0000012E			@@FOUND:
 0000012E  8D 46 01		    lea eax, [esi +1]
 00000131  8B 55 08		    mov edx, data
 00000134  EB 03		    jmp @@DONE

 00000136			@@NOTFOUND:
 00000136  8D 42 FF		    lea eax, [edx -1]
				    ;jmp @@DONE

 00000139			@@DONE:
 00000139  83 C4 08		    add esp, 8
 0000013C  2B C2		    sub eax, edx
 0000013E  5B			    pop ebx
 0000013F  5F			    pop edi
 00000140  5E			    pop esi
				    ret
 00000141  C9		   *	    leave  
 00000142  C2 0014	   *	    ret    00014h

 00000145			textpos_nc endp


				public memem
				; returns pointer of sub-string in other binary string, or NULL if not found
 00000145			memem proc data:dword, datasize:dword, text:dword, textlen:dword
 00000145  55		   *	    push   ebp
 00000146  8B EC	   *	    mov    ebp, esp
 00000148  8B 45 0C		    mov eax, datasize
 0000014B  8B 4D 14		    mov ecx, textlen
 0000014E  8B 55 10		    mov edx, text
 00000151  2B C1		    sub eax, ecx
 00000153  7D 04		    jnl @@Start
 00000155  33 C0		    xor eax, eax
 00000157  EB 36		    jmp short @@Stop

 00000159			@@Start:
 00000159  56			    push esi
 0000015A  8B 75 08		    mov esi, data
 0000015D  57			    push edi
 0000015E  53			    push ebx
 0000015F  8D 5C 06 01		    lea ebx, [eax + esi +1] ; txt-tail
 00000163  8B C6		    mov eax, esi

 00000165			@@shift1:
 00000165  8B F0		    mov esi, eax

 00000167			@@begin:
 00000167  3B C3		    cmp eax, ebx
 00000169  77 1F		    ja @@notfound
 0000016B  8D 46 01		    lea eax, [esi +1]   ; forward-1 pos
 0000016E  8B 4D 14		    mov ecx, textlen
 00000171  8B 7D 10		    mov edi, text

 00000174			@@fetch:
 00000174  8A 16		    mov dl, [esi]
 00000176  83 C6 01		    add esi, 1
 00000179  3A 17		    cmp dl, [edi]
 0000017B  75 E8		    jnz @@shift1
 0000017D  83 C7 01		    add edi, 1
 00000180  83 E9 01		    sub ecx, 1
 00000183  75 EF		    jnz @@fetch
 00000185  83 E8 01		    sub eax, 1  ; rewind-1 pos
 00000188  EB 02		    jmp @@Done

 0000018A			@@notfound:
 0000018A  33 C0		    xor eax, eax
 0000018C			@@Done:
 0000018C  5F			    pop edi
 0000018D  5E			    pop esi
 0000018E  5B			    pop ebx

 0000018F			@@Stop:
				   ret
 0000018F  C9		   *	    leave  
 00000190  C2 0010	   *	    ret    00010h
 00000193			memem endp


				public memem_nc
				; returns pointer of sub-string in other binary string, or NULL if not found
				; insensitive case search
 00000193			memem_nc proc data:dword, datasize:dword, text:dword, textlen:dword
 00000193  55		   *	    push   ebp
 00000194  8B EC	   *	    mov    ebp, esp
 00000196  8B 45 0C		    mov eax, datasize
 00000199  8B 4D 14		    mov ecx, textlen
 0000019C  8B 55 10		    mov edx, text
 0000019F  2B C1		    sub eax, ecx            ; datasize - textlen
 000001A1  7D 04		    jnl @@Start
 000001A3  33 C0		    xor eax, eax
 000001A5  EB 47		    jmp short @@Stop

 000001A7			@@Start:
 000001A7  56			    push esi
 000001A8  8B 75 08		    mov esi, data
 000001AB  57			    push edi
 000001AC  53			    push ebx
 000001AD  8D 5C 06 01		    lea ebx, [eax + esi +1] ; last comparable pos
 000001B1  8B C6		    mov eax, esi            ; data
 000001B3  33 D2		    xor edx, edx            ;
 000001B5  53			    push ebx                ; savelast comparable pos

 000001B6			@@shift1:
 000001B6  8B F0		    mov esi, eax

 000001B8			@@begin:
 000001B8  3B 04 24		    cmp eax, [esp]
 000001BB  77 2B		    ja @@notfound
 000001BD  8D 46 01		    lea eax, [esi +1]       ; forward-1 pos
 000001C0  8B 4D 14		    mov ecx, textlen
 000001C3  8B 7D 10		    mov edi, text

 000001C6			@@fetch:
 000001C6  8A 16		    mov dl, [esi]
 000001C8  83 C6 01		    add esi, 1
 000001CB  8A 9A 00000000 R	    mov bl, upcase_table[edx]
 000001D1  8A 17		    mov dl, [edi]
 000001D3  83 C7 01		    add edi, 1
 000001D6  3A 9A 00000000 R	    cmp bl, upcase_table[edx]
 000001DC  75 D8		    jnz @@shift1
 000001DE  83 E9 01		    sub ecx, 1
 000001E1  75 E3		    jnz @@fetch
 000001E3  83 E8 01		    sub eax, 1  ; rewind-1 pos
 000001E6  EB 02		    jmp @@Done

 000001E8			@@notfound:
 000001E8  33 C0		    xor eax, eax
 000001EA			@@Done:
 000001EA  5B			    pop ebx
 000001EB  5F			    pop edi
 000001EC  5E			    pop esi
 000001ED  5B			    pop ebx

 000001EE			@@Stop:
				   ret
 000001EE  C9		   *	    leave  
 000001EF  C2 0010	   *	    ret    00010h

 000001F2			memem_nc endp



				END

Microsoft (R) Macro Assembler Version 9.00.30729.01	    03/02/23 04:02:03
bmh.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000100 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001F2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

init_bmtable_nc  . . . . . . . .	P Near	 00000035 _TEXT	Length= 0000003B Public STDCALL
  text . . . . . . . . . . . . .	DWord	 bp + 00000008
  textlen  . . . . . . . . . . .	DWord	 bp + 0000000C
  shift_table_nc . . . . . . . .	DWord	 bp + 00000010
  @@loop . . . . . . . . . . . .	L Near	 0000005E _TEXT	
init_bmtable . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000035 Public STDCALL
  text . . . . . . . . . . . . .	DWord	 bp + 00000008
  textlen  . . . . . . . . . . .	DWord	 bp + 0000000C
  shift_table  . . . . . . . . .	DWord	 bp + 00000010
  @@loop . . . . . . . . . . . .	L Near	 00000025 _TEXT	
memem_nc . . . . . . . . . . . .	P Near	 00000193 _TEXT	Length= 0000005F Public STDCALL
  data . . . . . . . . . . . . .	DWord	 bp + 00000008
  datasize . . . . . . . . . . .	DWord	 bp + 0000000C
  text . . . . . . . . . . . . .	DWord	 bp + 00000010
  textlen  . . . . . . . . . . .	DWord	 bp + 00000014
  @@Start  . . . . . . . . . . .	L Near	 000001A7 _TEXT	
  @@shift1 . . . . . . . . . . .	L Near	 000001B6 _TEXT	
  @@begin  . . . . . . . . . . .	L Near	 000001B8 _TEXT	
  @@fetch  . . . . . . . . . . .	L Near	 000001C6 _TEXT	
  @@notfound . . . . . . . . . .	L Near	 000001E8 _TEXT	
  @@Done . . . . . . . . . . . .	L Near	 000001EA _TEXT	
  @@Stop . . . . . . . . . . . .	L Near	 000001EE _TEXT	
memem  . . . . . . . . . . . . .	P Near	 00000145 _TEXT	Length= 0000004E Public STDCALL
  data . . . . . . . . . . . . .	DWord	 bp + 00000008
  datasize . . . . . . . . . . .	DWord	 bp + 0000000C
  text . . . . . . . . . . . . .	DWord	 bp + 00000010
  textlen  . . . . . . . . . . .	DWord	 bp + 00000014
  @@Start  . . . . . . . . . . .	L Near	 00000159 _TEXT	
  @@shift1 . . . . . . . . . . .	L Near	 00000165 _TEXT	
  @@begin  . . . . . . . . . . .	L Near	 00000167 _TEXT	
  @@fetch  . . . . . . . . . . .	L Near	 00000174 _TEXT	
  @@notfound . . . . . . . . . .	L Near	 0000018A _TEXT	
  @@Done . . . . . . . . . . . .	L Near	 0000018C _TEXT	
  @@Stop . . . . . . . . . . . .	L Near	 0000018F _TEXT	
textpos_nc . . . . . . . . . . .	P Near	 000000CE _TEXT	Length= 00000077 Public STDCALL
  data . . . . . . . . . . . . .	DWord	 bp + 00000008
  datasize . . . . . . . . . . .	DWord	 bp + 0000000C
  text . . . . . . . . . . . . .	DWord	 bp + 00000010
  textlen  . . . . . . . . . . .	DWord	 bp + 00000014
  shift_table  . . . . . . . . .	DWord	 bp + 00000018
  @@shifted  . . . . . . . . . .	L Near	 000000EF _TEXT	
  @@bmStart  . . . . . . . . . .	L Near	 00000105 _TEXT	
  @@get_cycle  . . . . . . . . .	L Near	 00000109 _TEXT	
  @@fetch_nc . . . . . . . . . .	L Near	 00000113 _TEXT	
  @@FOUND  . . . . . . . . . . .	L Near	 0000012E _TEXT	
  @@NOTFOUND . . . . . . . . . .	L Near	 00000136 _TEXT	
  @@DONE . . . . . . . . . . . .	L Near	 00000139 _TEXT	
textpos  . . . . . . . . . . . .	P Near	 00000070 _TEXT	Length= 0000005E Public STDCALL
  data . . . . . . . . . . . . .	DWord	 bp + 00000008
  datasize . . . . . . . . . . .	DWord	 bp + 0000000C
  text . . . . . . . . . . . . .	DWord	 bp + 00000010
  textlen  . . . . . . . . . . .	DWord	 bp + 00000014
  shift_table  . . . . . . . . .	DWord	 bp + 00000018
  @@shifted  . . . . . . . . . .	L Near	 00000090 _TEXT	
  @@bmStart  . . . . . . . . . .	L Near	 0000009D _TEXT	
  @@get_cycle  . . . . . . . . .	L Near	 000000A1 _TEXT	
  @@fetch  . . . . . . . . . . .	L Near	 000000AF _TEXT	
  @@FOUND  . . . . . . . . . . .	L Near	 000000BA _TEXT	
  @@NOTFOUND . . . . . . . . . .	L Near	 000000C2 _TEXT	
  @@DONE . . . . . . . . . . . .	L Near	 000000C5 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
masm . . . . . . . . . . . . . .	Text   	 1
upcase_table . . . . . . . . . .	Byte	 00000000 _DATA	

	   0 Warnings
	   0 Errors
