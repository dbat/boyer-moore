Microsoft (R) Macro Assembler Version 9.00.30729.01	    03/04/23 04:00:21
bmh.asm							     Page 1 - 1


				.686
				.mmx
				.model flat, stdcall
				option casemap :none
				;option prologue:none, epilogue:none

				;LOCALS @@

 00000000			.data
				align 16
				.radix 16
 00000000			upcase_table \
	   0F0E0D0C0B0A09080706050403020100
				    oword 00f0e0d0c0b0a09080706050403020100
 00000010  1F1E1D1C1B1A19181716151413121110     oword 01f1e1d1c1b1a19181716151413121110
 00000020  2F2E2D2C2B2A29282726252423222120     oword 02f2e2d2c2b2a29282726252423222120
 00000030  3F3E3D3C3B3A39383736353433323130     oword 03f3e3d3c3b3a39383736353433323130
 00000040  4F4E4D4C4B4A49484746454443424140     oword 04f4e4d4c4b4a49484746454443424140
 00000050  5F5E5D5C5B5A59585756555453525150     oword 05f5e5d5c5b5a59585756555453525150
				    ;dq 06766656463626160, 06f6e6d6c6b6a6968
				    ;dq 07776757473727170, 07f7e7d7c7b7a7978
 00000060  4F4E4D4C4B4A49484746454443424160     oword 04f4e4d4c4b4a49484746454443424160
 00000070  7F7E7D7C7B5A59585756555453525150     oword 07f7e7d7c7b5a59585756555453525150
 00000080  8F8E8D8C8B8A89888786858483828180     oword 08f8e8d8c8b8a89888786858483828180
 00000090  9F9E9D9C9B9A99989796959493929190     oword 09f9e9d9c9b9a99989796959493929190
 000000A0  AFAEADACABAAA9A8A7A6A5A4A3A2A1A0     oword 0afaeadacabaaa9a8a7a6a5a4a3a2a1a0
 000000B0  BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0     oword 0bfbebdbcbbbab9b8b7b6b5b4b3b2b1b0
 000000C0  CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0     oword 0cfcecdcccbcac9c8c7c6c5c4c3c2c1c0
 000000D0  DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0     oword 0dfdedddcdbdad9d8d7d6d5d4d3d2d1d0
 000000E0  EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0     oword 0efeeedecebeae9e8e7e6e5e4e3e2e1e0
 000000F0  FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0     oword 0fffefdfcfbfaf9f8f7f6f5f4f3f2f1f0

				.radix 0ah
 00000000			.code
				align 4

				public init_bmtable
				; initialize shit_table array[256] of integer
 00000000			init_bmtable proc text:dword, textlen:dword, shift_table:dword
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  57			    push edi

 00000004  8B 7D 10		    mov edi, shift_table
 00000007  8B 4D 08		    mov ecx, text         ;
 0000000A  8B 45 0C		    mov eax, textlen      ;
 0000000D  8B D1		    mov edx, ecx          ; text
 0000000F  B9 00000100		    mov ecx, 100h
 00000014  F3/ AB		    rep stosd

 00000016  8D 48 FF		    lea ecx, [eax -1]     ; len -1
 00000019  8D 87 FFFFFC00	    lea eax, [edi -400h]  ; shift_table rewind
 0000001F  8B FA		    mov edi, edx          ; text
 00000021  8B D0		    mov edx, eax          ; shift_table
 00000023  33 C0		    xor eax, eax

 00000025			@@loop:
 00000025  8A 07		    mov al, [edi]         ; curtail
 00000027  8D 7F 01		    lea edi, [edi +1]
 0000002A  89 0C 82		    mov [edx + eax*4], ecx
 0000002D  49			    dec ecx
 0000002E  7F F5		    jg @@loop

 00000030  5F			    pop edi
				    ret
 00000031  C9		   *	    leave  
 00000032  C2 000C	   *	    ret    0000Ch
 00000035			init_bmtable endp

				public init_bmtable_nc
				; initialize shit_table array[256] of integer for insensitive case search
 00000035			init_bmtable_nc proc text:dword, textlen:dword, shift_table_nc:dword
 00000035  55		   *	    push   ebp
 00000036  8B EC	   *	    mov    ebp, esp
 00000038  56			    push esi
 00000039  57			    push edi

 0000003A  8B 7D 10		    mov edi, shift_table_nc
 0000003D  8B 4D 08		    mov ecx, text         ;
 00000040  8B 45 0C		    mov eax, textlen      ;
 00000043  8B D1		    mov edx, ecx          ; text
 00000045  B9 00000100		    mov ecx, 100h
 0000004A  F3/ AB		    rep stosd

 0000004C  8D 48 FF		    lea ecx, [eax -1]     ; len -1
 0000004F  8D BF FFFFFC00	    lea edi, [edi -400h]  ; shift_table rewind
 00000055  8B F2		    mov esi, edx          ; text
 00000057  BA 00000000 R	    mov edx, offset upcase_table
 0000005C  33 C0		    xor eax, eax

 0000005E			@@loop:
 0000005E  8A 06		    mov al, [esi]         ; curtail
 00000060  46			    inc esi
 00000061  8A 04 10		    mov al, [edx + eax]
 00000064  89 0C 87		    mov [edi + eax*4], ecx
 00000067  49			    dec ecx
 00000068  75 F4		    jnz @@loop

 0000006A  5F			    pop edi
 0000006B  5E			    pop esi
				    ret
 0000006C  C9		   *	    leave  
 0000006D  C2 000C	   *	    ret    0000Ch
 00000070			init_bmtable_nc endp


				public textpos
				; returns pointer of sub-string in other binary string, or NULL if not found
				; shift_table must already been prepared with init_bmtable
 00000070			textpos proc data:dword, datasize:dword, text:dword, textlen:dword, shift_table:dword
 00000070  55		   *	    push   ebp
 00000071  8B EC	   *	    mov    ebp, esp
 00000073  56			    push esi
 00000074  57			    push edi
 00000075  53			    push ebx

 00000076  8B 55 0C		    mov edx, datasize
 00000079  8B 75 08		    mov esi, data
 0000007C  8B 45 14		    mov eax, textlen

 0000007F  8D 54 32 FF		    lea edx, [esi + edx -1]
 00000083  8D 74 30 FF		    lea esi, [esi + eax -1]

 00000087  8B 5D 18		    mov ebx, shift_table
 0000008A  89 54 24 FC		    mov dword ptr [esp - 4], edx ; tail
				    ;// mov edx, esi ; store pos

 0000008E  EB 0D		    jmp @@bmStart

 00000090			@@shifted:
 00000090  8A 02		    mov al, [edx]
 00000092  8B F2		    mov esi, edx ; restore pos
 00000094  8B 04 83		    mov eax, [ebx + eax*4]
 00000097  8B 54 24 FC		    mov edx, [esp - 4] ; tail
 0000009B  03 F0		    add esi, eax ; lea esi, [esi + eax]

 0000009D			@@bmStart:
 0000009D  33 C0		    xor eax, eax
 0000009F  3B F2		    cmp esi, edx
 000000A1  77 1A		    ja @@NOTFOUND

 000000A3			@@get_cycle:
 000000A3  8B 7D 10		    mov edi, text
 000000A6  8B 4D 14		    mov ecx, textlen
 000000A9  8B D6		    mov edx, esi ; store pos
 000000AB  8D 7C 39 FF		    lea edi, [edi + ecx -1]

 000000AF			@@fetch:
 000000AF  8A 06		    mov al, [esi]
 000000B1  4E			    dec esi
 000000B2  3A 07		    cmp al, [edi]
 000000B4  75 DA		    jnz @@shifted
 000000B6  4F			    dec edi
 000000B7  49			    dec ecx
 000000B8  75 F5		    jnz @@fetch

 000000BA  8D 46 01		@@FOUND: lea eax, [esi + 1]
 000000BD			@@NOTFOUND:
 000000BD			@@DONE:
 000000BD  5B			    pop ebx
 000000BE  5F			    pop edi
 000000BF  5E			    pop esi
				    ret
 000000C0  C9		   *	    leave  
 000000C1  C2 0014	   *	    ret    00014h
 000000C4			textpos endp

				public textpos_nc
				; returns pointer of sub-string in other binary string, or NULL if not found
				; shift_table must already been prepared with init_bmtable_nocase
 000000C4			textpos_nc proc data:dword, datasize:dword, text:dword, textlen:dword, shift_table:dword
 000000C4  55		   *	    push   ebp
 000000C5  8B EC	   *	    mov    ebp, esp
 000000C7  56			    push esi
 000000C8  57			    push edi
 000000C9  53			    push ebx

 000000CA  8B 45 14		    mov eax, textlen
 000000CD  8B 75 08		    mov esi, data
 000000D0  8B 55 0C		    mov edx, datasize
 000000D3  8B 7D 10		    mov edi, text

 000000D6  83 E8 01		    sub eax, 1            ; textlen -1
 000000D9  8D 54 16 FF		    lea edx, [edx+esi-1]  ; data tail

 000000DD  03 F0		    add esi, eax          ; cmp data offset
 000000DF  03 F8		    add edi, eax          ; text tail

 000000E1  52			    push edx              ; 4 data tail
 000000E2  57			    push edi              ; 0 text tail

 000000E3  EB 16		    jmp @@bmStart

 000000E5			@@shifted:
 000000E5  8A 02		    mov al, [edx]

 000000E7  8B 5D 18		    mov ebx, shift_table
 000000EA  8A 80 00000000 R	    mov al, byte ptr upcase_table[eax]   ; get upcased char
 000000F0  8B F2		    mov esi, edx                ; restore pos
 000000F2  8B 04 83		    mov eax, [ebx + eax*4]
 000000F5  8B 54 24 04		    mov edx, [esp + 4]          ; DATA tail
 000000F9  03 F0		    add esi, eax                ; lea esi, [edx + eax]

 000000FB			@@bmStart:
 000000FB  33 C0		    xor eax, eax
 000000FD  3B F2		    cmp esi, edx
 000000FF  77 22		    ja @@NOTFOUND

 00000101			@@get_cycle:
 00000101  8B 3C 24		    mov edi, [esp]      ; text tail
 00000104  8B 4D 14		    mov ecx, textlen    ; text len
 00000107  8B D6		    mov edx, esi        ; store pos

 00000109			@@fetch_nc:
 00000109  8A 06		    mov al, [esi]
 0000010B  4E			    dec esi
 0000010C  8A 98 00000000 R	    mov bl, byte ptr upcase_table[eax]
 00000112  8A 07		    mov al, [edi]
 00000114  4F			    dec edi
 00000115  3A 98 00000000 R	    cmp bl, byte ptr upcase_table[eax]
 0000011B  75 C8		    jnz @@shifted
 0000011D  49			    dec ecx
 0000011E  75 E9		    jnz @@fetch_nc

 00000120  8D 46 01		@@FOUND: lea eax, [esi + 1]
 00000123			@@NOTFOUND:
 00000123			@@DONE:
 00000123  83 C4 08		    add esp, 8
 00000126  5B			    pop ebx
 00000127  5F			    pop edi
 00000128  5E			    pop esi
				    ret
 00000129  C9		   *	    leave  
 0000012A  C2 0014	   *	    ret    00014h
 0000012D			textpos_nc endp


				public memem
				; returns pointer of sub-string in other binary string, or NULL if not found
 0000012D			memem proc data:dword, datasize:dword, text:dword, textlen:dword
 0000012D  55		   *	    push   ebp
 0000012E  8B EC	   *	    mov    ebp, esp
 00000130  8B 55 0C		    mov edx, datasize
 00000133  8B 4D 14		    mov ecx, textlen
 00000136  33 C0		    xor eax, eax
 00000138  2B D1		    sub edx, ecx
 0000013A  7C 2C		    jl @@Stop

 0000013C			@@Start:
 0000013C  56			    push esi
 0000013D  8B 75 08		    mov esi, data
 00000140  57			    push edi
 00000141  53			    push ebx
 00000142  8B C6		    mov eax, esi
 00000144  8D 5C 16 01		    lea ebx, [edx + esi +1] ; txt-tail

 00000148			@@shift1:
 00000148  8B F0		    mov esi, eax
 0000014A  33 C0		    xor eax, eax

 0000014C			@@begin:
 0000014C  3B F3		    cmp esi, ebx
 0000014E  77 15		    ja @@notfound
 00000150  8D 46 01		    lea eax, [esi +1]   ; forward-1 pos
 00000153  8B 4D 14		    mov ecx, textlen
 00000156  8B 7D 10		    mov edi, text

 00000159			@@fetch:
 00000159  8A 16		    mov dl, [esi]
 0000015B  46			    inc esi
 0000015C  3A 17		    cmp dl, [edi]
 0000015E  75 E8		    jnz @@shift1
 00000160  47			    inc edi
 00000161  49			    dec ecx
 00000162  75 F5		    jnz @@fetch
 00000164  48			    dec eax  ; rewind-1 pos
				    ;jmp @@Done

 00000165			@@notfound:
				    ;xor eax, eax
 00000165			@@Done:
 00000165  5F			    pop edi
 00000166  5E			    pop esi
 00000167  5B			    pop ebx

 00000168			@@Stop:
				    ret
 00000168  C9		   *	    leave  
 00000169  C2 0010	   *	    ret    00010h
 0000016C			memem endp


				public memem_nc
				; returns pointer of sub-string in other binary string, or NULL if not found
				; insensitive case search
 0000016C			memem_nc proc data:dword, datasize:dword, text:dword, textlen:dword
 0000016C  55		   *	    push   ebp
 0000016D  8B EC	   *	    mov    ebp, esp
 0000016F  8B 55 0C		    mov edx, datasize
 00000172  8B 4D 14		    mov ecx, textlen
 00000175  33 C0		    xor eax, eax            ;
 00000177  2B D1		    sub edx, ecx            ; datasize - textlen
 00000179  7C 3D		    jl @@Stop

 0000017B			@@Start:
 0000017B  56			    push esi
 0000017C  8B 75 08		    mov esi, data
 0000017F  57			    push edi
 00000180  53			    push ebx
 00000181  8D 5C 16 01		    lea ebx, [edx + esi +1] ; last comparable pos
 00000185  8B D0		    mov edx, eax            ; zero
 00000187  8B C6		    mov eax, esi            ; data
 00000189  53			    push ebx                ; savelast comparable pos

 0000018A			@@shift1:
 0000018A  8B F0		    mov esi, eax
 0000018C  33 C0		    xor eax, eax

 0000018E			@@begin:
 0000018E  3B 34 24		    cmp esi, [esp]
 00000191  77 21		    ja @@notfound
 00000193  8D 46 01		    lea eax, [esi +1]       ; forward-1 pos
 00000196  8B 4D 14		    mov ecx, textlen
 00000199  8B 7D 10		    mov edi, text

 0000019C			@@fetch:
 0000019C  8A 16		    mov dl, [esi]
 0000019E  46			    inc esi
 0000019F  8A 9A 00000000 R	    mov bl, byte ptr upcase_table[edx]
 000001A5  8A 17		    mov dl, [edi]
 000001A7  47			    inc edi
 000001A8  3A 9A 00000000 R	    cmp bl, byte ptr upcase_table[edx]
 000001AE  75 DA		    jnz @@shift1
 000001B0  49			    dec ecx
 000001B1  75 E9		    jnz @@fetch
 000001B3  48			    dec eax; rewind-1 pos
				    ;jmp @@Done

 000001B4			@@notfound:
				    ;xor eax, eax
 000001B4			@@Done:
 000001B4  5B			    pop ebx
 000001B5  5F			    pop edi
 000001B6  5E			    pop esi
 000001B7  5B			    pop ebx

 000001B8			@@Stop:
				   ret
 000001B8  C9		   *	    leave  
 000001B9  C2 0010	   *	    ret    00010h
 000001BC			memem_nc endp



				END

Microsoft (R) Macro Assembler Version 9.00.30729.01	    03/04/23 04:00:21
bmh.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000100 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001BC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

init_bmtable_nc  . . . . . . . .	P Near	 00000035 _TEXT	Length= 0000003B Public STDCALL
  text . . . . . . . . . . . . .	DWord	 bp + 00000008
  textlen  . . . . . . . . . . .	DWord	 bp + 0000000C
  shift_table_nc . . . . . . . .	DWord	 bp + 00000010
  @@loop . . . . . . . . . . . .	L Near	 0000005E _TEXT	
init_bmtable . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000035 Public STDCALL
  text . . . . . . . . . . . . .	DWord	 bp + 00000008
  textlen  . . . . . . . . . . .	DWord	 bp + 0000000C
  shift_table  . . . . . . . . .	DWord	 bp + 00000010
  @@loop . . . . . . . . . . . .	L Near	 00000025 _TEXT	
memem_nc . . . . . . . . . . . .	P Near	 0000016C _TEXT	Length= 00000050 Public STDCALL
  data . . . . . . . . . . . . .	DWord	 bp + 00000008
  datasize . . . . . . . . . . .	DWord	 bp + 0000000C
  text . . . . . . . . . . . . .	DWord	 bp + 00000010
  textlen  . . . . . . . . . . .	DWord	 bp + 00000014
  @@Start  . . . . . . . . . . .	L Near	 0000017B _TEXT	
  @@shift1 . . . . . . . . . . .	L Near	 0000018A _TEXT	
  @@begin  . . . . . . . . . . .	L Near	 0000018E _TEXT	
  @@fetch  . . . . . . . . . . .	L Near	 0000019C _TEXT	
  @@notfound . . . . . . . . . .	L Near	 000001B4 _TEXT	
  @@Done . . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  @@Stop . . . . . . . . . . . .	L Near	 000001B8 _TEXT	
memem  . . . . . . . . . . . . .	P Near	 0000012D _TEXT	Length= 0000003F Public STDCALL
  data . . . . . . . . . . . . .	DWord	 bp + 00000008
  datasize . . . . . . . . . . .	DWord	 bp + 0000000C
  text . . . . . . . . . . . . .	DWord	 bp + 00000010
  textlen  . . . . . . . . . . .	DWord	 bp + 00000014
  @@Start  . . . . . . . . . . .	L Near	 0000013C _TEXT	
  @@shift1 . . . . . . . . . . .	L Near	 00000148 _TEXT	
  @@begin  . . . . . . . . . . .	L Near	 0000014C _TEXT	
  @@fetch  . . . . . . . . . . .	L Near	 00000159 _TEXT	
  @@notfound . . . . . . . . . .	L Near	 00000165 _TEXT	
  @@Done . . . . . . . . . . . .	L Near	 00000165 _TEXT	
  @@Stop . . . . . . . . . . . .	L Near	 00000168 _TEXT	
textpos_nc . . . . . . . . . . .	P Near	 000000C4 _TEXT	Length= 00000069 Public STDCALL
  data . . . . . . . . . . . . .	DWord	 bp + 00000008
  datasize . . . . . . . . . . .	DWord	 bp + 0000000C
  text . . . . . . . . . . . . .	DWord	 bp + 00000010
  textlen  . . . . . . . . . . .	DWord	 bp + 00000014
  shift_table  . . . . . . . . .	DWord	 bp + 00000018
  @@shifted  . . . . . . . . . .	L Near	 000000E5 _TEXT	
  @@bmStart  . . . . . . . . . .	L Near	 000000FB _TEXT	
  @@get_cycle  . . . . . . . . .	L Near	 00000101 _TEXT	
  @@fetch_nc . . . . . . . . . .	L Near	 00000109 _TEXT	
  @@FOUND  . . . . . . . . . . .	L Near	 00000120 _TEXT	
  @@NOTFOUND . . . . . . . . . .	L Near	 00000123 _TEXT	
  @@DONE . . . . . . . . . . . .	L Near	 00000123 _TEXT	
textpos  . . . . . . . . . . . .	P Near	 00000070 _TEXT	Length= 00000054 Public STDCALL
  data . . . . . . . . . . . . .	DWord	 bp + 00000008
  datasize . . . . . . . . . . .	DWord	 bp + 0000000C
  text . . . . . . . . . . . . .	DWord	 bp + 00000010
  textlen  . . . . . . . . . . .	DWord	 bp + 00000014
  shift_table  . . . . . . . . .	DWord	 bp + 00000018
  @@shifted  . . . . . . . . . .	L Near	 00000090 _TEXT	
  @@bmStart  . . . . . . . . . .	L Near	 0000009D _TEXT	
  @@get_cycle  . . . . . . . . .	L Near	 000000A3 _TEXT	
  @@fetch  . . . . . . . . . . .	L Near	 000000AF _TEXT	
  @@FOUND  . . . . . . . . . . .	L Near	 000000BA _TEXT	
  @@NOTFOUND . . . . . . . . . .	L Near	 000000BD _TEXT	
  @@DONE . . . . . . . . . . . .	L Near	 000000BD _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
masm . . . . . . . . . . . . . .	Text   	 1
upcase_table . . . . . . . . . .	‹ÿU‹ìQƒeü  00000000 _DATA	

	   0 Warnings
	   0 Errors
